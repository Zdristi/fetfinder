document.addEventListener('DOMContentLoaded',function(){initSwipe();});function initSwipe(){let users=[];let currentIndex=0;let startX,startY,moveX,moveY;let currentCard=null;fetch('/api/users').then(response=>response.json()).then(data=>{users=data.map(([userId,userData])=>({id:userId,...userData}));if(users.length>0){renderCards();initTouchEvents();initKeyboardEvents();}else{document.querySelector('.card-stack').innerHTML=` <div class="empty-state"><div>üë•</div><h3>${getTranslatedText('no_more_users')}</h3><p>${getTranslatedText('check_later')}</p></div>`;}}).catch(error=>{console.error('Error fetching users:',error);document.querySelector('.card-stack').innerHTML=` <div class="empty-state"><div>‚ö†Ô∏è</div><h3>Error loading users</h3><p>Please try again later</p></div>`;});function renderCards(){const stack=document.querySelector('.card-stack');stack.innerHTML='';for(let i=0;i < Math.min(3,users.length - currentIndex);i++){const userIndex=currentIndex+i;if(userIndex>=users.length)break;const user=users[userIndex];const card=document.createElement('div');card.className=`swipe-card ${i===0 ? 'top':i===1 ? 'middle':'bottom'}`;card.dataset.userId=user.id;let avatarContent=user.username ? user.username.charAt(0).toUpperCase():'?';let avatarStyle='';if(user.photo){const photoUrl=user.photo.startsWith('http')? user.photo:`/static/uploads/${user.photo}`;avatarContent='';avatarStyle=`background-image:url('${photoUrl}');background-size:cover;`;}let locationInfo='';if(user.city || user.country){locationInfo=` <p style="margin:5px 0;color:var(--gray);"><i class="fas fa-map-marker-alt"></i>${user.city || ''}${user.city && user.country ? ',':''}${user.country || ''}</p>`;}card.innerHTML=` <div class="card-image" style="${avatarStyle}">${avatarContent}</div><div class="card-content"><h2>${user.username || 'Anonymous'}</h2>${locationInfo}<p>${user.bio || 'No bio provided'}</p>${user.interests && user.interests.length>0 ? ` <div><strong>Interests:</strong><div class="card-tags">${user.interests.slice(0,5).map(interest=>`<span class="badge badge-interest">${interest}</span>`).join('')}</div></div>`:''}${user.fetishes && user.fetishes.length>0 ? ` <div><strong>Fetishes:</strong><div class="card-tags">${user.fetishes.slice(0,5).map(fetish=>`<span class="badge badge-fetish">${fetish}</span>`).join('')}</div></div>`:''}</div><!-- Swipe buttons overlay --><div style="position:absolute;bottom:20px;left:0;right:0;display:flex;justify-content:center;gap:20px;pointer-events:none;"><button class="action-btn reject-btn" style="pointer-events:auto;" onclick="swipeAction('dislike',this)"><i class="fas fa-times"></i></button><button class="action-btn superlike-btn" style="pointer-events:auto;" onclick="swipeAction('superlike',this)"><i class="fas fa-star"></i></button><button class="action-btn like-btn" style="pointer-events:auto;" onclick="swipeAction('like',this)"><i class="fas fa-heart"></i></button></div>`;stack.appendChild(card);}}function initTouchEvents(){const topCard=document.querySelector('.swipe-card.top');if(!topCard)return;topCard.addEventListener('mousedown',startDrag);document.addEventListener('mousemove',duringDrag);document.addEventListener('mouseup',endDrag);topCard.addEventListener('touchstart',handleTouchStart);document.addEventListener('touchmove',handleTouchMove);document.addEventListener('touchend',handleTouchEnd);}function initKeyboardEvents(){document.addEventListener('keydown',function(e){if(users.length <=currentIndex)return;switch(e.key){case 'ArrowLeft':e.preventDefault();animateSwipe('dislike');break;case 'ArrowRight':e.preventDefault();animateSwipe('like');break;case 'ArrowUp':e.preventDefault();animateSwipe('superlike');break;}});}function handleTouchStart(e){startX=e.touches[0].clientX;startY=e.touches[0].clientY;currentCard=document.querySelector('.swipe-card.top');}function handleTouchMove(e){if(!currentCard)return;moveX=e.touches[0].clientX;moveY=e.touches[0].clientY;const diffX=moveX - startX;const diffY=moveY - startY;currentCard.style.transform=`translate(${diffX}px,${diffY}px)rotate(${diffX * 0.1}deg)`;const opacity=1 - Math.abs(diffX)/ 300;currentCard.style.opacity=Math.max(0.7,opacity);}function handleTouchEnd(e){if(!currentCard)return;const diffX=moveX - startX;const diffY=moveY - startY;if(Math.abs(diffX)>100){const action=diffX>0 ? 'like':'dislike';animateSwipe(action);}else if(Math.abs(diffY)>100 && diffY < 0){animateSwipe('superlike');}else{currentCard.style.transition='transform 0.3s,opacity 0.3s';currentCard.style.transform='translate(0,0)rotate(0deg)';currentCard.style.opacity='1';setTimeout(()=>{currentCard.style.transition='';},300);}currentCard=null;}function startDrag(e){startX=e.clientX;startY=e.clientY;currentCard=document.querySelector('.swipe-card.top');}function duringDrag(e){if(!currentCard)return;moveX=e.clientX;moveY=e.clientY;const diffX=moveX - startX;const diffY=moveY - startY;currentCard.style.transform=`translate(${diffX}px,${diffY}px)rotate(${diffX * 0.1}deg)`;const opacity=1 - Math.abs(diffX)/ 300;currentCard.style.opacity=Math.max(0.7,opacity);}function endDrag(e){if(!currentCard)return;moveX=e.clientX;moveY=e.clientY;const diffX=moveX - startX;const diffY=moveY - startY;if(Math.abs(diffX)>100){const action=diffX>0 ? 'like':'dislike';animateSwipe(action);}else if(Math.abs(diffY)>100 && diffY < 0){animateSwipe('superlike');}else{currentCard.style.transition='transform 0.3s,opacity 0.3s';currentCard.style.transform='translate(0,0)rotate(0deg)';currentCard.style.opacity='1';setTimeout(()=>{currentCard.style.transition='';},300);}currentCard=null;}function animateSwipe(action){if(currentIndex>=users.length)return;const user=users[currentIndex];const card=document.querySelector('.swipe-card.top');if(!card)return;fetch('/api/match',{method:'POST',headers:{'Content-Type':'application/json',},body:JSON.stringify({user2:user.id,action:action})}).then(response=>response.json()).then(data=>{console.log('Match response:',data);if(data.mutual_match){console.log('Showing match notification for:',data.matched_user_name);showMatchNotification(data.matched_user_name,data.matched_user_photo);}}).catch(error=>{console.error('Error sending match:',error);});card.style.transition='transform 0.3s,opacity 0.3s';if(action==='like'){card.style.transform='translate(100vw,0)rotate(30deg)';card.style.opacity='0';}else if(action==='dislike'){card.style.transform='translate(-100vw,0)rotate(-30deg)';card.style.opacity='0';}else if(action==='superlike'){card.style.transform='translate(0,-100vh)rotate(0deg)';card.style.opacity='0';}setTimeout(()=>{currentIndex++;if(currentIndex < users.length){renderCards();initTouchEvents();}else{document.querySelector('.card-stack').innerHTML=` <div class="empty-state"><div>üë•</div><h3>${getTranslatedText('no_more_users')}</h3><p>${getTranslatedText('check_later')}</p></div>`;}},300);}function showMatchNotification(userName,userPhoto){console.log('Creating match notification for:',userName);const notification=document.createElement('div');notification.className='match-notification';notification.innerHTML=` <div class="match-content"><div class="match-icon">‚ù§Ô∏è</div><h3>It's a Match!</h3><p>You and ${userName}liked each other</p><div class="match-actions"><button class="btn btn-outline" onclick="closeNotification(this)">Continue Swiping</button><a href="/matches" class="btn">View Matches</a></div></div>`;document.body.appendChild(notification);console.log('Notification added to DOM');setTimeout(()=>{if(notification.parentNode){notification.remove();console.log('Notification removed');}},5000);}window.closeNotification=function(button){const notification=button.closest('.match-notification');if(notification){notification.remove();}};window.swipeAction=function(action,button){if(button){button.style.transform='scale(0.9)';setTimeout(()=>{button.style.transform='';},100);}animateSwipe(action);};}function getTranslatedText(key){const translations={'no_more_users':document.documentElement.lang==='ru' ? '–ë–æ–ª—å—à–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–∫–∞–∑–∞':'No more users to show','check_later':document.documentElement.lang==='ru' ? '–ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π!':'Check back later for new matches!'};return translations[key]|| key;}